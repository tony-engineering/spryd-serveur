using log4net;
using Spryd.Server.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;

namespace Spryd.Server.Controllers
{
    public class SessionController : ApiController
    {
        private static readonly ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private ISessionDal sessionDal;
        private IUserDal userDal;
        private ISprydZoneDal sprydZoneDal;

        /// <summary>
        /// Default constructor
        /// </summary>
        public SessionController()
        {
            sessionDal = new SessionDal();
            userDal = new UserDal();
            sprydZoneDal = new SprydZoneDal();
        }

        /// <summary>
        /// Constructor used for tests (possible to put a different DB)
        /// </summary>
        /// <param name="sessionFakeDal"></param>
        /// <param name="userFakeDal"></param>
        /// <param name="sprydZoneFakeDal"></param>
        public SessionController(ISessionDal sessionFakeDal, IUserDal userFakeDal, ISprydZoneDal sprydZoneFakeDal)
        {
            sessionDal = sessionFakeDal;
            userDal = userFakeDal;
            sprydZoneDal = sprydZoneFakeDal;
        }

        /// <summary>
        /// Create session
        /// </summary>
        /// <param name="userSession"></param>
        /// <returns></returns>
        [Route("session")]
        [HttpPost]
        public Session AddSession([FromBody] UserSession userSession)
        {
            ValidateUserSession(userSession);

            sessionDal.AddSession(userSession.Session); // Create the session    
            userSession.SessionId = userSession.Session.Id; // Get incremental session Id generated by the database        
            userDal.AddUserSession(userSession); // Add the creator to the session 

            return userSession.Session;
        }

        /// <summary>
        /// Get inactive users out of session and
        /// get session active users
        /// </summary>
        /// <param name="idSession"></param>
        /// <returns></returns>
        [Route("session/{idSession}/users")]
        [HttpGet]
        public List<User> GetSessionUsers(int idSession)
        {
            IsSessionExist(idSession);
            sessionDal.GetInactiveUsersOutOfSession(idSession);
            IsSessionExist(idSession); // Check session exist again (if creator was inactive, the session is over)
            var listUsers = sessionDal.GetSessionUsers(idSession);
            IsListUsersEmpty(listUsers);
            return listUsers;
        }

        /// <summary>
        /// Get sessions users without kick
        /// </summary>
        /// <param name="idSession"></param>
        /// <returns></returns>
        [Route("session/{idSession}/allusers")]
        [HttpGet]
        public List<User> GetSessionAllUsers(int idSession)
        {
            IsSessionExist(idSession);
            var listUsers = sessionDal.GetSessionAllUsers(idSession);

            if (listUsers.IsNullOrEmpty()) // s'il n'y a aucun
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NoContent, "There is no users in session " + idSession));
            return listUsers;
        }

        /// <summary>
        /// Join a session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        [Route("session/{idSession}/user/{idUser}/join")]
        [HttpPost]
        public Session JoinSession(int idSession, int idUser, [FromUri] string password = null)
        {
            CheckJoiningUserAndSession(idSession, idUser, password);

            var userSession = new UserSession()
            {
                UserId = idUser,
                SessionId = idSession,
                IsCreator = false,
                StartDate = DateTime.Now,
                LastActivity = DateTime.Now
            };

            userDal.AddUserSession(userSession);
            return sessionDal.GetSessionById(idSession);
        }

        /// <summary>
        /// User leave the session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        [Route("session/{idSession}/user/{idUser}/leave")]
        [HttpPost]
        public Session LeaveSession(int idSession, int idUser)
        {
            CheckLeavingUserAndSession(idSession, idUser);
            userDal.EndUserSession(idUser, idSession);
            IfLeavingUserIsCreator_EndSession(idSession, idUser);

            return sessionDal.GetSessionById(idSession);
        }

        /// <summary>
        /// If user is the session's creator, it ends the session of all participants and end the session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        private void IfLeavingUserIsCreator_EndSession(int idSession, int idUser)
        {
            if (sessionDal.IsCreatorOfSession(idSession, idUser))
            {
                sessionDal.GetUsersOutOfSession(idSession);
                sessionDal.EndSession(idSession);
            }
        }

        /// <summary>
        /// End the session
        /// </summary>
        /// <param name="idSession"></param>
        [Route("session/{idSession}/end")]
        [HttpPost]
        public Session EndSession(int idSession)
        {
            IsSessionRunning(idSession);
            sessionDal.GetUsersOutOfSession(idSession);
            sessionDal.EndSession(idSession);

            return sessionDal.GetSessionById(idSession);
        }

        /// <summary>
        /// Share an item in this session
        /// Add files in http body request
        /// </summary>
        /// <returns></returns>
        [Route("session/{idSession}/sharedItems")]
        [HttpPost]
        public HttpResponseMessage AddSharedItem(int idSession)
        {
            IsSessionRunning(idSession);

            var httpRequest = HttpContext.Current.Request;
            if (httpRequest.Files.Count == 0)
                return Request.CreateResponse(HttpStatusCode.BadRequest,"No files received.");

            foreach (string file in httpRequest.Files)
            {
                var postedFile = httpRequest.Files[file];
                var filePath = WebApiConfig.SharedItemsRepository + postedFile.FileName;
                postedFile.SaveAs(filePath); 
                
                sessionDal.AddSharedItem(new SharedItem()
                {
                    CreateDate = DateTime.Now,
                    Path = WebApiConfig.SharedItemsRepository + postedFile.FileName,
                    Text = postedFile.FileName,
                    SessionId = idSession
                });
            }

            return Request.CreateResponse(HttpStatusCode.Created);
        }

        /// <summary>
        /// Get items shared in a session
        /// </summary>
        /// <param name="idSession"></param>
        /// <returns></returns>
        [Route("session/{idSession}/sharedItems")]
        [HttpGet]
        public List<SharedItem> GetSharedItems(int idSession)
        {
            IsSessionExist(idSession);

            var listSharedItems = sessionDal.GetSharedItems(idSession);
            //if(listSharedItems.IsNullOrEmpty())
              //  throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NoContent, "Session " + idSession + " doesn't have shared items."));
            return listSharedItems;
        }

        /// <summary>
        /// Download item shared in a session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idSharedItem"></param>
        /// <returns></returns>
        [Route("session/{idSession}/sharedItems/{idSharedItem}")]
        [HttpGet]
        public HttpResponseMessage GetGetSharedItem(int idSession, int idSharedItem)
        {
            IsSessionExist(idSession);
            IsSharedItemExist(idSession, idSharedItem);

            SharedItem sharedItem = sessionDal.GetSharedItemById(idSession, idSharedItem);
            

            HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.OK);
            response.Content = new StreamContent(new FileStream(sharedItem.Path, FileMode.Open, FileAccess.Read));
            response.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment");
            response.Content.Headers.ContentDisposition.FileName = sharedItem.Text;

            return response;
        }

        /// <summary>
        /// Set user last activity date in this session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        [Route("session/{idSession}/user/{idUser}/i-am-here")]
        [HttpPost]
        public Session IAmHere(int idSession, int idUser)
        {
            IsSessionRunning(idSession);
            IsUserExist(idUser);
            IsUserStillInSession(idSession, idUser);
            
            userDal.UpdateUserLastActivity(idSession, idUser);
            return sessionDal.GetSessionById(idSession);
        }

        #region Checking and validation

        /// <summary>
        /// Check if session is running
        /// </summary>
        /// <param name="idSession"></param>
        private void IsSessionRunning(int idSession)
        {
            IsSessionExist(idSession);
            // Check if session is still going on
            if (!sessionDal.IsSessionRunning(idSession))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Conflict, "Session " + idSession + " is already over."));
        }

        /// <summary>
        /// Check if session exist
        /// </summary>
        /// <param name="idSession"></param>
        private void IsSessionExist(int idSession)
        {
            // Check if the session exist
            if (!sessionDal.IsSessionExist(idSession))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, "Session " + idSession + " does not exist."));
        }

        /// <summary>
        /// If user already have a userSession, end this userSession to create a new one
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        private void EndUserSessionIfAlreadyJoin(int idSession, int idUser)
        {
            // Check if the user has already join this session
            if (userDal.IsUserInSession(idSession, idUser))
                userDal.EndUserSession(idUser, idSession);
        }

        /// <summary>
        /// Check if user is in session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        private void IsUserStillInSession(int idSession, int idUser)
        {
            // Check if the user is still in this session
            if (!userDal.IsUserInSession(idSession, idUser))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Conflict, "User " + idUser + " is not in session " + idSession + "."));
        }

        /// <summary>
        /// Check if user exist
        /// </summary>
        /// <param name="idUser"></param>
        private void IsUserExist(int idUser)
        {
            // Check if the creator user exist
            if (!userDal.IsUserExist(idUser))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, "User " + idUser + " does not exist."));
        }

        /// <summary>
        /// Check id spryd zone exist
        /// </summary>
        /// <param name="sprydZoneId"></param>
        private void IsSprydZoneExist(int sprydZoneId)
        {
            // Check if the new session's sprydzone exist
            if (!sprydZoneDal.IsSprydZoneExist(sprydZoneId))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, "There is no existing Spryd Zone with ID : " + sprydZoneId + "."));
        }

        /// <summary>
        /// Check if there is not already a running session in this spryd zone
        /// </summary>
        /// <param name="sprydZoneId"></param>
        private void IsAlreadyASessionRunningInSprydZone(int sprydZoneId)
        {
            if (sessionDal.IsAlreadySessionRunningInSprydZone(sprydZoneId))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, "There is already a running session in Spryd Zone : " + sprydZoneId + "."));
        }

        /// <summary>
        /// Indicate if users list is empty
        /// </summary>
        /// <param name="listUsers"></param>
        private void IsListUsersEmpty(List<User> listUsers)
        {
            if (listUsers.IsNullOrEmpty()) // s'il n'y a aucun
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NoContent, "There is no active users in this session."));
        }

        /// <summary>
        /// Check session password
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="password"></param>
        private void IsGoodPassword(int idSession, string password)
        {
            if (!sessionDal.IsGoodPassword(idSession, password))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Unauthorized, "Wrong password !"));
        }

        /// <summary>
        /// Validate session password
        /// </summary>
        /// <param name="password"></param>
        private void IsSessionPasswordValid(string password)
        {
            if (password == null)
                return;
            if (password.Length == 0)
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Password not valid (lentgh = 0)."));
        }

        /// <summary>
        /// Check if this shared item exist in this session
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idSharedItem"></param>
        private void IsSharedItemExist(int idSession, int idSharedItem)
        {
            if (!sessionDal.IsSharedItemExist(idSession, idSharedItem))
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NoContent, "There is no item " + idSharedItem + " in session " + idSession + "."));
        }

        /// <summary>
        /// Validate user session informations before creating the session
        /// </summary>
        /// <param name="userSession"></param>
        private void ValidateUserSession(UserSession userSession)
        {
            IsUserExist(userSession.UserId);
            IsSprydZoneExist(userSession.Session.SprydZoneId);
            IsAlreadyASessionRunningInSprydZone(userSession.Session.SprydZoneId);
            IsSessionPasswordValid(userSession.Session.Password);

            userSession.Session.StartDate = DateTime.Now;
            userSession.LastActivity = DateTime.Now;
            userSession.StartDate = DateTime.Now;
            userSession.IsCreator = true;
        }

        /// <summary>
        /// Check if this session is available and if this user can join it
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        /// <param name="password"></param>
        private void CheckJoiningUserAndSession(int idSession, int idUser, string password)
        {
            IsSessionRunning(idSession);
            IsUserExist(idUser);
            if(sessionDal.GetSessionById(idSession).Password != null) // if there is a password, check it
                IsGoodPassword(idSession, password);
            EndUserSessionIfAlreadyJoin(idSession, idUser);
        }
        
        /// <summary>
        /// Check if the session is still available and user info
        /// </summary>
        /// <param name="idSession"></param>
        /// <param name="idUser"></param>
        private void CheckLeavingUserAndSession(int idSession, int idUser)
        {
            IsSessionRunning(idSession);
            IsUserExist(idUser);
            IsUserStillInSession(idSession, idUser);
        }

        #endregion
    }
}
